generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  INDIVIDUALS
  BUSINESSES
  RECYCLERS
}

enum CollectionStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Users {
  sys_id             String               @id @default(uuid())
  email              String               @unique
  name               String
  password           String
  type               UserType             @default(INDIVIDUALS)
  phoneNumber        String
  address            String?
  city               String?
  state              String?
  zipCode            String?
  country            String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isVerified         Boolean              @default(false)
  collectionRequests CollectionRequest[]
  payments           Payment[]
  recycler           Recycler?
  verificationTokens VerificationTokens[] @relation("verificationToken")
}

model CollectionRequest {
  id                  String                  @id @default(uuid())
  userId              String
  user                Users                   @relation(fields: [userId], references: [sys_id])
  preferredPickupDate DateTime
  status              CollectionStatus        @default(PENDING)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  recyclerId          String?
  recycler            Recycler?               @relation("CollectionRequestRecycler", fields: [recyclerId], references: [id])
  payment             Payment?
  items               CollectionRequestItem[]
}

model Item {
  id                     String                  @id @default(uuid())
  name                   String
  description            String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  collectionRequestItems CollectionRequestItem[]
}

model CollectionRequestItem {
  id                  String            @id @default(uuid())
  collectionRequestId String
  collectionRequest   CollectionRequest @relation(fields: [collectionRequestId], references: [id])
  itemId              String
  item                Item              @relation(fields: [itemId], references: [id])
  quantity            Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([collectionRequestId, itemId])
}

model Recycler {
  id       String    @id @default(uuid())
  userId   String    @unique
  user     Users     @relation(fields: [userId], references: [sys_id])
  services Service[]
  collectionRequests CollectionRequest[] @relation("CollectionRequestRecycler")
}

model Service {
  id                 String              @id @default(uuid())
  recyclerId         String
  recycler           Recycler            @relation(fields: [recyclerId], references: [id])
  name               String
  description        String
  serviceArea        String
  processingMethods  String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  acceptedWasteTypes AcceptedWasteType[]
}

model Payment {
  id                  String             @id @default(uuid())
  userId              String
  user                Users              @relation(fields: [userId], references: [sys_id])
  collectionRequestId String?            @unique
  collectionRequest   CollectionRequest? @relation(fields: [collectionRequestId], references: [id])
  amount              Float
  status              PaymentStatus      @default(PENDING)
  transactionId       String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model AcceptedWasteType {
  id        String  @id @default(uuid())
  type      String
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
}

model VerificationTokens {
  id        String   @id @default(uuid())
  userSysId String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      Users    @relation("verificationToken", fields: [userSysId], references: [sys_id])

  @@index([userSysId])
}
