const prisma = require('../../utils/prisma');

const schedulePickup = async (req, res, next) => {
    try {
        const { date, items, recyclerId } = req.body;
        const { user } = req;

        // Check if the user is a recycler
        if (user.role === 'recycler') {
            throw new Error('Recyclers can not schedule pickups');
        }

        // Check if the recycler exists
        const recycler = await prisma.recycler.findUnique({
            where: { id: recyclerId },
            include: {
                user: true
            }
        });
        if (!recycler || recycler.user.type !== 'RECYCLERS') {
            return next({ path: '/user/schedule-pickup', status: 400, message: 'Invalid recycler ID' })
        }

        // Create an array of promises to create or connect items
        const itemPromises = items.map(async (itemData) => {
            const { name, quantity } = itemData;

            // Try to find the item by name
            let existingItem = await prisma.item.findFirst({
                where: { name }
            });

            // If item doesn't exist, create it
            if (!existingItem) {
                existingItem = await prisma.item.create({
                    data: {
                        name
                        // Optionally add description or other fields here if needed
                    }
                });
            }

            // Return the structure required by Prisma to connectOrCreate
            return {
                item: {
                    connectOrCreate: {
                        where: { id: existingItem.id }, // Use id here assuming `id` is auto-generated by Prisma
                        create: { name } // No need to create again if it exists
                    }
                },
                quantity
            };
        });

        // Execute all promises concurrently
        const createdItems = await Promise.all(itemPromises);

        // Create the collection request
        const pickup = await prisma.collectionRequest.create({
            data: {
                userId: user.sys_id,
                recyclerId,
                preferredPickupDate: new Date(date),
                items: {
                    create: createdItems
                }
            },
            include: {
                items: {
                    include: {
                        item: true
                    }
                }
            }
        });

        res.status(200).json({ pickup });
    } catch (err) {
        next({ path: '/user/schedule-pickup', status: 400, message: err.message, extraData: err });
    }
};

const getPickups = async (req, res, next) => {
    try {
        const { user } = req;

        // Check if the user is a recycler
        // if (user.type === 'RECYCLERS') {
        //     throw new Error('Recyclers can not schedule pickups');
        // }

        // Fetch all pickups
        const pickups = await prisma.collectionRequest.findMany({
            where: { userId: user.sys_id },
            include: {
                items: {
                    include: {
                        item: true,
                    }
                }
            }
        });

        res.status(200).json({ pickups });
    } catch (err) {
        next({ path: '/user/pickups', status: 400, message: err.message, extraData: err });
    }
}

module.exports = {
    schedulePickup,
    getPickups
};
